// Generated by CoffeeScript 1.3.1
(function() {
  var Device, DeviceView, Devices, DevicesView, devices_view,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  Device = (function(_super) {

    __extends(Device, _super);

    Device.name = 'Device';

    function Device() {
      return Device.__super__.constructor.apply(this, arguments);
    }

    Device.prototype.defaults = {
      part1: 'Hello',
      part2: 'Backbone'
    };

    return Device;

  })(Backbone.Model);

  Devices = (function(_super) {

    __extends(Devices, _super);

    Devices.name = 'Devices';

    function Devices() {
      return Devices.__super__.constructor.apply(this, arguments);
    }

    Devices.prototype.model = Device;

    return Devices;

  })(Backbone.Collection);

  DeviceView = (function(_super) {

    __extends(DeviceView, _super);

    DeviceView.name = 'DeviceView';

    function DeviceView() {
      return DeviceView.__super__.constructor.apply(this, arguments);
    }

    DeviceView.prototype.tagName = 'li';

    DeviceView.prototype.initialize = function() {
      return _.bindAll(this);
    };

    DeviceView.prototype.render = function() {
      $(this.el).html("<span>" + (this.model.get('part1')) + " Nisse! " + (this.model.get('part2')) + "!</span>");
      return this;
    };

    return DeviceView;

  })(Backbone.View);

  DevicesView = (function(_super) {

    __extends(DevicesView, _super);

    DevicesView.name = 'DevicesView';

    function DevicesView() {
      return DevicesView.__super__.constructor.apply(this, arguments);
    }

    DevicesView.prototype.el = $('.thumbnails');

    DevicesView.prototype.initialize = function() {
      _.bindAll(this);
      this.devices = new Devices;
      this.devices.bind('add', this.appendDevice);
      this.counter = 0;
      return this.render();
    };

    DevicesView.prototype.render = function() {
      return $(this.el).append('<li>Hello, Backbone! <button>Add View</button></li>');
    };

    DevicesView.prototype.addDevice = function() {
      var device;
      device = new Device;
      device.set({
        part1: "test"
      });
      device.set({
        part2: "part2"
      });
      return this.devices.add(device);
    };

    DevicesView.prototype.appendDevice = function(device) {
      var device_view;
      device_view = new DeviceView({
        model: device
      });
      return $(this.el).append(device_view.render().el);
    };

    DevicesView.prototype.events = {
      'click button': 'addDevice'
    };

    return DevicesView;

  })(Backbone.View);

  devices_view = new DevicesView;

}).call(this);
